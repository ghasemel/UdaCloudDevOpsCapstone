AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Ghasem Elyasi / Udacity DevOps Cloud Engineer - Capstone Project
  This template deploys a VPC. with a pair of public and private subnets
  spread across two Availability Zones.
  It deploys:
  - an Internet Gateway with a default route on public subnets
  - a pair of NAT Gateways (one in each AZ)
  - default routes in the private subnets to NAT gateways
  - default routes in the private subnets to VPC endpoint

Parameters:
  myEnvName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  myVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  mySubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  mySubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  mySubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  mySubnet4CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref myVpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref myEnvName

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref myEnvName

  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC

  # route table
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${myEnvName} Public Route Table

  myPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  # subnet 1
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref mySubnet1CIDR
      VpcId: !Ref myVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${myEnvName} Public Subnet (AZ1)

  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet1
      RouteTableId: !Ref myRouteTable

  # subnet 2
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      CidrBlock: !Ref mySubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${myEnvName} Private Subnet (AZ2)

  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet2
      RouteTableId: !Ref myRouteTable

  # subnet 3
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      CidrBlock: !Ref mySubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${myEnvName} Public Subent (AZ3)

  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet3
      RouteTableId: !Ref myRouteTable

  # subnet 4
  mySubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 3
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      CidrBlock: !Ref mySubnet4CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${myEnvName} Private Subnet (AZ4)

  mySubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet4
      RouteTableId: !Ref myRouteTable


  # Kubernetes
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupName: !Sub UdaInventory-123qwe123
      GroupDescription: Allow port 22 and port 8000.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: prod
      Version: '1.18'
      RoleArn: >-
        arn:aws:iam::867975079432:role/uda-eks-service-role
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !GetAtt InstanceSecurityGroup.GroupId
        SubnetIds:
          - !Ref mySubnet1
          - !Ref mySubnet2
          - !Ref mySubnet3
          - !Ref mySubnet4

Outputs:
  VPC:
    Description: A reference to the create VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub ${myEnvName}-VPCID

  VPCRouteTable:
    Description: Public Routing
    Value: !Ref myRouteTable
    Export:
      Name: !Sub ${myEnvName}-PUB-RT

  Subnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref mySubnet1, !Ref mySubnet2, !Ref mySubnet3, !Ref mySubnet4]]
    Export:
      Name: !Sub ${myEnvName}-PUB-NETS

  Subnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref mySubnet1
    Export:
      Name: !Sub ${myEnvName}-SN1

  Subnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref mySubnet2
    Export:
      Name: !Sub ${myEnvName}-SN2

  Subnet3:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref mySubnet3
    Export:
      Name: !Sub ${myEnvName}-SN3

  Subnet4:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref mySubnet4
    Export:
      Name: !Sub ${myEnvName}-SN4
